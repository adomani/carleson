import Carleson.Defs
import Carleson.ToMathlib.HardyLittlewood

open MeasureTheory Set Bornology Function ENNReal Metric Filter Topology
open scoped NNReal

noncomputable section

variable {X : Type*} {a : ‚Ñï} [MetricSpace X] [DoublingMeasure X (defaultA a : ‚Ñï)]
variable {œÑ C r R : ‚Ñù} {q q' : ‚Ñù‚â•0}
variable {F G : Set X}
variable {K : X ‚Üí X ‚Üí ‚ÑÇ} {x x' : X} [IsTwoSidedKernel a K]
variable [CompatibleFunctions ‚Ñù X (defaultA a)] [IsCancellative X (defaultœÑ a)]

/-! ## Section 10.2 and Lemma 10.0.3 -/

/-- The constant used in `nontangential_from_simple`.
I(F) think the constant needs to be fixed in the blueprint. -/
irreducible_def C10_2_1 (a : ‚Ñï) : ‚Ñù‚â•0 := 2 ^ (4 * a)

/-- Lemma 10.2.1, formulated differently.
The blueprint version is basically this after unfolding `HasBoundedWeakType`, `wnorm` and `wnorm'`.
-/
theorem maximal_theorem (ha : 4 ‚â§ a) :
    HasBoundedWeakType (globalMaximalFunction volume 1 : (X ‚Üí ‚ÑÇ) ‚Üí X ‚Üí ‚Ñù‚â•0‚àû) 1 1 volume volume
      (C10_2_1 a) := by
  apply HasWeakType.hasBoundedWeakType
  have : C10_2_1 a = (defaultA a) ^ 4 := by
    simp_rw [C10_2_1_def, defaultA, pow_mul', Nat.cast_pow, Nat.cast_ofNat]
  rw [this]
  rw [‚Üê hasWeakType_toReal_iff sorry /- remove if we remove the `toReal` from
    `hasWeakType_globalMaximalFunction`. -/]
  -- for some reason `exact` goes on a wild goose chase on the next line
  apply hasWeakType_globalMaximalFunction le_rfl le_rfl


/-- Lemma 10.2.2.
Should be an easy consequence of `VitaliFamily.ae_tendsto_average`. -/
theorem lebesgue_differentiation
    {f : X ‚Üí ‚ÑÇ} (hmf : Measurable f) (hf : eLpNorm f ‚àû < ‚àû) (h2f : volume (support f) < ‚àû) :
    ‚àÄ·µê x ‚àÇvolume, ‚àÉ (c : ‚Ñï ‚Üí X) (r : ‚Ñï ‚Üí ‚Ñù),
    Tendsto (fun i => ‚®ç y in ball (c i) (r i), f y ‚àÇvolume) atTop (ùìù (f x)) ‚àß
    Tendsto r atTop (ùìù[>] 0) ‚àß
    ‚àÄ i, x ‚àà ball (c i) (r i) := by
  sorry


/-! Lemma 10.2.3 is in Mathlib: `Pairwise.countable_of_isOpen_disjoint`. -/

/-- Lemma 10.2.4
Can we use `Vitali.exists_disjoint_subfamily_covering_enlargement` (or adapt it so that we
can use it)?  -/
theorem ball_covering {O : Set X} (hO : IsOpen O) :
    ‚àÉ (s : Set X) (r : X ‚Üí ‚Ñù), s.Countable ‚àß (s.PairwiseDisjoint fun a => closedBall a (r a)) ‚àß
      ‚ãÉ x ‚àà s, ball x (3 * r x) = O ‚àß (‚àÄ x ‚àà s, ¬¨ Disjoint (ball x (7 * r x)) O·∂ú) ‚àß
      ‚àÄ x ‚àà O, Cardinal.mk { y ‚àà s | x ‚àà ball y (3 * r y)} ‚â§ (2 ^ (6 * a) : ‚Ñï) := by
  sorry


/-- Lemma 10.2.5.
To check: are we using `volume univ < ‚àû`? -/
theorem calderon_zygmund_decomposition
    {f : X ‚Üí ‚ÑÇ} (hmf : Measurable f) (hf : eLpNorm f ‚àû < ‚àû) (h2f : volume (support f) < ‚àû)
    {Œ± : ‚Ñù‚â•0} (hŒ± : ‚®ç‚Åª x, ‚Äñf x‚Äñ‚Çë < Œ±) :
    -- do we need the special case B‚ÇÅ = X?
    -- b j x = b_j(x)
    ‚àÉ (g : X ‚Üí ‚ÑÇ) (hg : Measurable g) (s : Set X) (r : X ‚Üí ‚Ñù) (b : X ‚Üí X ‚Üí ‚ÑÇ),
    s.Countable ‚àß
    (‚àÄ x, Cardinal.mk { j ‚àà s | x ‚àà ball j (3 * r j)} ‚â§ (2 ^ (6 * a) : ‚Ñï)) ‚àß
    (‚àÄ x, f x = g x + tsum (s.indicator (b ¬∑ x))) ‚àß
    eLpNorm g ‚àû volume ‚â§ 2 ^ (3 * a) * Œ± ‚àß
    ‚à´‚Åª x, ‚Äñg x‚Äñ‚Çë ‚â§ ‚à´‚Åª x, ‚Äñf x‚Äñ‚Çë ‚àß
    (‚àÄ j ‚àà s, support (b j) ‚äÜ ball j (r j)) ‚àß
    (‚àÄ j ‚àà s, ‚à´ x, b j x = 0) ‚àß
    (‚àÄ j ‚àà s, eLpNorm (b j) 1 volume ‚â§ 2 ^ (2 * a + 1) * Œ± * volume (ball j (r j))) ‚àß
    (tsum (s.indicator (fun j ‚Ü¶ volume (ball j (r j)))) ‚â§ 2 ^ (4 * a) / Œ± * eLpNorm f 1 volume) ‚àß
    (tsum (s.indicator (fun j ‚Ü¶ eLpNorm (b j) 1 volume)) ‚â§ 2 * eLpNorm f 1) := by
  sorry




/-- The constant used in `czoperator_weak_1_1`. -/
irreducible_def C10_0_3 (a : ‚Ñï) : ‚Ñù‚â•0 := 2 ^ (a ^ 3 + 19 * a)

/-- Lemma 10.0.3, formulated differently.
The blueprint version is basically this after unfolding `HasBoundedWeakType`, `wnorm` and `wnorm'`.
-/
theorem czoperator_weak_1_1 (ha : 4 ‚â§ a)
    (hT : ‚àÉ r > 0, HasBoundedStrongType (CZOperator K r) 2 2 volume volume (C_Ts a)) :
    HasBoundedWeakType (CZOperator K r) 1 1 volume volume (C10_0_3 a) := by
  sorry


end
